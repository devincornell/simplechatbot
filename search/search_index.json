{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the <code>simplechatbot</code> Python package! This package provides tools for working with LLM agents - in particular, chatbots that track tools and conversation history.</p> <p>See the examples in the navbar to the left!</p>"},{"location":"#upcoming-features","title":"Upcoming Features","text":"<ul> <li>Adding clone methods.</li> <li>Update repr on <code>StreamResult</code>.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install git+ssh://git@github.com/devincornell/simplechatbot.git@main\n</code></pre> <p>When inside the package directory: Basic install: </p> <p><code>pip install .</code></p> <p>This package uses buildtools - see <code>pyproject.toml</code> for package details.</p>"},{"location":"#makefile","title":"Makefile","text":"<p>You can also use <code>make</code>.</p> <p>To install: </p> <pre><code>make install\nmake uninstall\n</code></pre>"},{"location":"#importing","title":"Importing","text":"<p>Basic importing works as you would expect.</p> <p><code>import simplechatbot</code></p>"},{"location":"#generating-documentation","title":"Generating Documentation","text":"<p>The Makefile has most of these commands, but including them here jsut in case.</p> <pre><code>pip install mkdocs\npip install mkdocs-material\n</code></pre> <p>Start Test Server</p> <pre><code>mkdocs serve\n</code></pre> <p>Build the documentation.</p> <pre><code>mkdocs build\n</code></pre> <p>Publish the documation</p> <pre><code>mkdocs gh-deploy --force\n</code></pre>"},{"location":"#example-documentation","title":"Example Documentation","text":"<p>In the Makefile I included the commands that will take example jupyter notebooks and convert them to markdown so that <code>mkdocs</code> can eventually convert them to html for the website. Simply add a notebook to the <code>site_examples</code> folder and it will be automatically converted to markdown and placed in the right folder.</p> <pre><code>EXAMPLE_NOTEBOOK_FOLDER = ./site_examples/# this is where example notebooks are stored\nEXAMPLE_NOTEBOOK_MARKDOWN_FOLDER = ./docs/examples/# this is where example notebooks are stored\n\nexample_notebooks:\n    -mkdir $(EXAMPLE_NOTEBOOK_MARKDOWN_FOLDER)\n    jupyter nbconvert --to markdown $(EXAMPLE_NOTEBOOK_FOLDER)/*.ipynb\n    mv $(EXAMPLE_NOTEBOOK_FOLDER)/*.md $(EXAMPLE_NOTEBOOK_MARKDOWN_FOLDER)\n</code></pre>"},{"location":"examples/a-overview/","title":"Introduction","text":"<p>This is a brief introduction to the <code>simplechatbot</code> package.</p> <pre><code>import sys\nsys.path.append('..')\n\nimport simplechatbot\n</code></pre>"},{"location":"examples/a-overview/#instantiating-chatbot-objects","title":"Instantiating <code>ChatBot</code> Objects","text":"<p><code>ChatBot</code> instances maintain three elements: a chat model (or runnable) LLM, chat history, and available tools / functions.</p> <p>It may be instantiated from any langchain chat model or runnable.</p> <pre><code>from langchain_openai import ChatOpenAI\n\n# optional: use this to grab keys from a json file rather than setting system variables\nkeychain = simplechatbot.APIKeyChain.from_json_file('../keys.json')\n\nopenai_model = ChatOpenAI(model='gpt-4o-mini', api_key=keychain['openai'])\nchatbot = simplechatbot.ChatBot.from_model(model=openai_model)\nprint(chatbot)\n</code></pre> <pre><code>ChatBot(model_type=ChatOpenAI, model_name=\"gpt-4o-mini\", tools=ToolLookup(tools={}))\n</code></pre> <p>The <code>tools</code> parameter allows you to pass any langchain tools you want your chatbot to be able to use. You can use one of Langchain's built-in tools (such as <code>FileManagementToolkit</code>) or define your own custom tools. I will use <code>FileManagementToolkit</code> for demonstration purposes here.</p> <pre><code>import langchain_core.tools\n\n@langchain_core.tools.tool\ndef check_new_messages(text: str, username: str) -&gt; str:\n    '''Check messages.'''\n    return f'No new messages.'\n\nchatbot = simplechatbot.ChatBot.from_model(\n    model = openai_model,\n    tools = [check_new_messages],\n)\n</code></pre> <p>You can see that tools are added to an internal <code>ToolSet</code> object.</p> <pre><code>chatbot.toolset\n</code></pre> <pre><code>ToolSet(tools={'check_new_messages': StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10c19e480&gt;)}, tool_factories=[], tool_choice=None)\n</code></pre> <p>Set a system prompt for the chatbot by passing it as the <code>system_prompt</code> argument.</p> <pre><code>system_prompt = '''\nYou are a creative designer who has been tasked with creating a new slogan for a company.\nThe user will describe the company, and you will need to generate three slogan ideas for them.\n'''\nchatbot = simplechatbot.ChatBot.from_model(\n    model = openai_model,\n    tools = [check_new_messages],\n    system_prompt=system_prompt,\n)\n</code></pre> <p>While the LLM itself is just a function, we build conversation-like behavior by storing a chat history. In <code>simplechatbot</code>, the history is stored in a <code>ChatHistory</code>, which is just a list subtype where list elements contain langchain <code>BaseMessage</code> subtypes. You can access it through the <code>history</code> property, and work with it just as a list.</p> <p>Here you can see that the system prompt is simply added as the first message in the chatbot history. </p> <pre><code>chatbot.history\n</code></pre> <pre><code>[SystemMessage(content='\\nYou are a creative designer who has been tasked with creating a new slogan for a company.\\nThe user will describe the company, and you will need to generate three slogan ideas for them.\\n', additional_kwargs={}, response_metadata={})]\n</code></pre> <p>To see the conversation history that is sent to the LLM, you can use the <code>get_buffer_string</code> method. This uses the same langchain methods used to invoke the LLM, so it is useful for debugging.</p> <pre><code>print(chatbot.history.get_buffer_string())\n</code></pre> <pre><code>System: \nYou are a creative designer who has been tasked with creating a new slogan for a company.\nThe user will describe the company, and you will need to generate three slogan ideas for them.\n</code></pre> <p>Note that history is a <code>list</code> subtype, so you can iterate through messages as you would expect.</p> <pre><code>for m in chatbot.history:\n    print(m)\n</code></pre> <pre><code>content='\\nYou are a creative designer who has been tasked with creating a new slogan for a company.\\nThe user will describe the company, and you will need to generate three slogan ideas for them.\\n' additional_kwargs={} response_metadata={}\n</code></pre>"},{"location":"examples/a-overview/#high-level-chat-and-chat_stream-methods","title":"High-level <code>chat</code> and <code>chat_stream</code> Methods","text":"<p>There are two primary methods used to interact with the chatbot: <code>chat</code> and <code>chat_stream</code>. </p> <p>These are the method use-cases:</p> <p><code>.chat()</code> \u2192 <code>ChatResult</code>: Use when you want to retrieve the full LLM response at once when it finishes.</p> <p><code>.chat_stream()</code> \u2192 <code>ChatStream</code>: Use when you would like to show intermediary results to the user as they are received from the LLM.</p> <pre><code>chatbot.chat('My name is Devin.')\n</code></pre> <pre><code>ChatResult(content=Nice to meet you, Devin! How can I assist you today? Are you looking for help with a company slogan? If so, please provide some details about the company., tool_calls=[])\n</code></pre> <pre><code>chatbot.chat_stream('My name is Devin and I am a creative designer.')\n</code></pre> <pre><code>ChatStream(message_iter=&lt;generator object RunnableBindingBase.stream at 0x10b9a7790&gt;, chatbot=ChatBot(model_type=ChatOpenAI, model_name=\"gpt-4o-mini\", tools=ToolLookup(tools={'check_new_messages': StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10c19e480&gt;)})), tool_lookup=ToolLookup(tools={'check_new_messages': StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10c19e480&gt;)}), add_reply_to_history=True, full_message=AIMessageChunk(content='', additional_kwargs={}, response_metadata={}), exhausted=False)\n</code></pre> <p>Again use the <code>get_buffer_string</code> method to conveniently view the chat history.</p> <pre><code>print(chatbot.history.get_buffer_string())\n</code></pre> <pre><code>System: \nYou are a creative designer who has been tasked with creating a new slogan for a company.\nThe user will describe the company, and you will need to generate three slogan ideas for them.\n\nHuman: My name is Devin.\nAI: Nice to meet you, Devin! How can I assist you today? Are you looking for help with a company slogan? If so, please provide some details about the company.\nHuman: My name is Devin and I am a creative designer.\n</code></pre> <p>From the response to the prompt below you can see that it is maintained in the chat history because it \"retains\" knowledge that is given to it.</p> <pre><code>chatbot.chat('I have a quiz for you: what is my name?')\n</code></pre> <pre><code>ChatResult(content=Your name is Devin!, tool_calls=[])\n</code></pre>"},{"location":"examples/a-overview/#chat-and-chatresult-objects","title":"<code>.chat()</code> and <code>ChatResult</code> Objects","text":"<p>The <code>chat</code> method submits the current message and all history to the LLM and returns the reply as a <code>ChatResult</code> object.</p> <pre><code>chatbot.chat('Hello world.')\n</code></pre> <pre><code>ChatResult(content=Hello, Devin! How can I assist you today?, tool_calls=[])\n</code></pre> <p>If you want to submit the current chat history but do not want to add a new message, you can pass <code>None</code> as the message argument.</p> <pre><code>chatbot.chat(None)\n</code></pre> <pre><code>ChatResult(content=If you have any specific requests or questions, feel free to share! I'm here to help., tool_calls=[])\n</code></pre> <p>Alternatively, if you want to submit a query to the LLM but do not want to save it in the history, set <code>add_to_history = False</code>.</p> <pre><code>chatbot.chat('Hello world.', add_to_history=False)\n</code></pre> <pre><code>ChatResult(content=Hello again, Devin! If there's anything specific you'd like to discuss or if you need assistance, just let me know!, tool_calls=[])\n</code></pre> <p><code>ChatResult</code> objects are returned from <code>chat()</code> and <code>invoke()</code> calls and include the LLM response text or tool calling information.</p> <pre><code>result = chatbot.chat('What is my name?')\nresult\n</code></pre> <pre><code>ChatResult(content=Your name is Devin!, tool_calls=[])\n</code></pre> <p>If no tool calls were requested from the LLM, you can access the response as a string through the <code>content</code> property.</p> <pre><code>result.content\n</code></pre> <pre><code>'Your name is Devin!'\n</code></pre> <p>If tool calls were made, the content will be empty but you can get information about any tool calls through the <code>tool_calls</code> attribute. Notice that no tool calls were requested by the LLM in the response to this query.</p> <pre><code>result.tool_calls\n</code></pre> <pre><code>[]\n</code></pre> <p>If there were tool calls, you can execute them using the <code>execute_tools</code> method.</p> <pre><code>result.execute_tools()\n</code></pre> <pre><code>{}\n</code></pre> <p>We provided the chatbot with a tool called <code>check_new_messages</code> earlier, and the LLM will request a tool call if the user requests it.</p> <pre><code>result = chatbot.chat('Check new messages.')\nresult.tool_calls\n</code></pre> <pre><code>[ToolCallInfo(id='call_QqZ4mhbJaEcdKpoSrLrHLf6K', name='check_new_messages', type='tool_call', args={'text': 'Check new messages.', 'username': 'Devin'}, tool=StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10c19e480&gt;))]\n</code></pre> <p>The <code>execute_tools</code> method returns a dictionary of <code>ToolCallResult</code> objects which contain the tool call information from the LLM (<code>ToolCallInfo</code>) and the return value of the tool execution.</p> <pre><code>tool_results = result.execute_tools()\ntool_results\n</code></pre> <pre><code>{'check_new_messages': ToolCallResult(info=ToolCallInfo(id='call_QqZ4mhbJaEcdKpoSrLrHLf6K', name='check_new_messages', type='tool_call', args={'text': 'Check new messages.', 'username': 'Devin'}, tool=StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10c19e480&gt;)), return_value='No new messages.')}\n</code></pre> <p>Use the <code>return_value</code> attribute to access these results.</p> <pre><code>tool_results['check_new_messages'].return_value\n</code></pre> <pre><code>'No new messages.'\n</code></pre>"},{"location":"examples/a-overview/#chat_stream-and-streamresult-objects","title":"<code>.chat_stream()</code> and <code>StreamResult</code> Objects","text":"<p><code>chat_stream</code> is very similar to <code>chat</code>, but allows you to return content to the user as soon as the LLM produces it. The method returns a <code>StreamResult</code> object which has an iterator interface that accumulates results from the LLM while also returning incremental results.</p> <p>In this example, I call <code>chat_stream</code> to retrieve a <code>StreamResult</code> object, which I then iterate through to retrieve and print all results.</p> <pre><code>stream = chatbot.chat_stream('What is my name?')\nfor r in stream:\n    print(r.content, end='', flush=True)\nstream\n</code></pre> <pre><code>Your name is Devin!\n\n\n\n\nChatStream(message_iter=&lt;generator object RunnableBindingBase.stream at 0x10b9a7a60&gt;, chatbot=ChatBot(model_type=ChatOpenAI, model_name=\"gpt-4o-mini\", tools=ToolLookup(tools={'check_new_messages': StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10c19e480&gt;)})), tool_lookup=ToolLookup(tools={'check_new_messages': StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10c19e480&gt;)}), add_reply_to_history=True, full_message=AIMessageChunk(content='Your name is Devin!', additional_kwargs={}, response_metadata={'finish_reason': 'stop', 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_72ed7ab54c'}), exhausted=True)\n</code></pre> <p>You can check the <code>exhausted</code> flag to see if the LLM has returned all results yet.</p> <pre><code>stream = chatbot.chat_stream('What is my name?')\nprint(stream.exhausted)\nfor r in stream:\n    print(r.content, end='', flush=True)\nprint(stream.exhausted)\nstream\n</code></pre> <pre><code>False\nYour name is Devin!True\n\n\n\n\n\nChatStream(message_iter=&lt;generator object RunnableBindingBase.stream at 0x10b9a7c40&gt;, chatbot=ChatBot(model_type=ChatOpenAI, model_name=\"gpt-4o-mini\", tools=ToolLookup(tools={'check_new_messages': StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10c19e480&gt;)})), tool_lookup=ToolLookup(tools={'check_new_messages': StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10c19e480&gt;)}), add_reply_to_history=True, full_message=AIMessageChunk(content='Your name is Devin!', additional_kwargs={}, response_metadata={'finish_reason': 'stop', 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_72ed7ab54c'}), exhausted=True)\n</code></pre> <p>After retrieving all of the LLM response, you can check if any tool calls are required.</p> <pre><code>stream = chatbot.chat_stream('Check my messages.')\nfor r in stream:\n    print(r.content, end='', flush=True)\nstream.tool_calls\n</code></pre> <pre><code>[ToolCallInfo(id='call_yOvYEvE90FcCnN0sEChUV7RC', name='check_new_messages', type='tool_call', args={'text': 'Check my messages.', 'username': 'Devin'}, tool=StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10c19e480&gt;))]\n</code></pre> <p>And you would similarly execute tools by calling <code>execute_tools</code>. Note that you cannot call this method if the stream has not been exhausted.</p> <pre><code>stream.execute_tools()\n</code></pre> <pre><code>{'check_new_messages': ToolCallResult(info=ToolCallInfo(id='call_yOvYEvE90FcCnN0sEChUV7RC', name='check_new_messages', type='tool_call', args={'text': 'Check my messages.', 'username': 'Devin'}, tool=StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10c19e480&gt;)), return_value='No new messages.')}\n</code></pre> <p>You can use the <code>result</code> method to get a <code>ChatResult</code> object instead. If it has not retrieved all results from the LLM, it will do so before returning.</p> <pre><code>chatbot.chat_stream('Hello world.').result()\n</code></pre> <pre><code>ChatResult(content=Hello again, Devin! How can I assist you today?, tool_calls=[])\n</code></pre>"},{"location":"examples/a-overview/#low-level-llm-methods-invoke-and-stream","title":"Low-level LLM Methods: <code>invoke</code> and <code>stream</code>","text":"<p>These lower-level <code>invoke</code> and <code>stream</code> methods are used by the <code>chat</code> and <code>chat_stream</code> methods to submit prompts to the LLM. They can allow you to interact with the LLM and tools/functions without chat history. Their signatures are very similar to high-level methods and they return the same types.</p> <p>NOTE: These methods ignore the system prompt!</p> <p>The low-level <code>invoke</code> method returns a <code>ChatResult</code> object with the content and tool call information.</p> <pre><code>result = chatbot.invoke('Hello world!')\nresult\n</code></pre> <pre><code>ChatResult(content=Hello! How can I assist you today?, tool_calls=[])\n</code></pre> <p>And <code>stream</code> is very similar to <code>chat_stream</code> except that it ignores chat history.</p> <pre><code>stream = chatbot.stream('Check messages.')\nfor r in stream:\n    print(r.content, end='', flush=True)\nstream.execute_tools()\n</code></pre> <pre><code>{'check_new_messages': ToolCallResult(info=ToolCallInfo(id='call_4eW2NS9YLrqtEUZt2VmJC8SB', name='check_new_messages', type='tool_call', args={'text': 'Check messages.', 'username': 'User'}, tool=StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10c19e480&gt;)), return_value='No new messages.')}\n</code></pre>"},{"location":"examples/a-overview/#chat-user-interface","title":"Chat User Interface","text":"<p>Of course, what is a chatbot if you can't actually use it? To run an interactive command-line chat, use <code>.ui.start_interactive</code>.</p> <pre><code># uncomment to start interactive chat\n#chatbot.ui.start_interactive(stream=True, show_intro=True, show_tools=True)\n</code></pre>"},{"location":"examples/b-tool_calling/","title":"Tool Calling","text":"<p><code>simplechatbot</code> empowers chatbot agents with the ability to produce arguments for arbitrary user functions instead of providing a text response to the user's prompt. Using this interface you can enable features such as web searching, email sending/checking, file browsing, image creation, or any other functionality that can be accessed through Python. The LLM will \"decide\" whether and which tools/functions should be executed based on a given prompt, so the key is to use tools with clear and concise instructions.</p> <p>Under the hood, <code>ChatBot</code> instances maintain a collection of langchain tools which can be extracted from toolkits or even factory methods that accept the chatbot itself as a parameter. Tools may also be added at the time of LLM execution to enable dynamic systems of available tools.</p> <p>You can create your own custom tools or choose from Langchain's built-in tools. I will use <code>FileManagementToolkit</code> for demonstration purposes here.</p> <pre><code>import sys\nsys.path.append('..')\n\nimport simplechatbot\nfrom simplechatbot.openai import OpenAIChatBot\n</code></pre>"},{"location":"examples/b-tool_calling/#enabling-tools","title":"Enabling Tools","text":"<p>Start by creating a new example tool that can enables the LLM to check email for the user. We create this tool using the <code>@langchain_core.tools.tool</code> decorator.</p> <pre><code>import langchain_core.tools\n\n@langchain_core.tools.tool\ndef check_new_messages() -&gt; str:\n    '''Check messages.'''\n    return f'No new messages.'\n</code></pre> <p>We include this tool as part of the chatbot by passing the function through the <code>tools</code> argument.</p> <pre><code>keychain = simplechatbot.APIKeyChain.from_json_file('../keys.json')\n\nsystem_prompt = '''\nYou are designed to answer any question the user has and send/check messages if needed.\nWhen the user requests you to check your messages, you should display the retrieved messages\n to the user.\n'''\n\nchatbot = OpenAIChatBot.new(\n    model_name = 'gpt-4o-mini', \n    api_key=keychain['openai'],\n    system_prompt=system_prompt,\n    tools = [check_new_messages],\n)\n</code></pre> <p>Now the LLM will have access to these tools. While the chatbot instance stores the LLM object in the <code>_model</code> attribute, you can use <code>model</code> to get the LLM with bound tools.</p> <pre><code>chatbot.model\n</code></pre> <pre><code>RunnableBinding(bound=ChatOpenAI(client=&lt;openai.resources.chat.completions.Completions object at 0x128006a80&gt;, async_client=&lt;openai.resources.chat.completions.AsyncCompletions object at 0x1280306e0&gt;, root_client=&lt;openai.OpenAI object at 0x10f153a40&gt;, root_async_client=&lt;openai.AsyncOpenAI object at 0x128006ae0&gt;, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), kwargs={'tools': [{'type': 'function', 'function': {'name': 'check_new_messages', 'description': 'Check messages.', 'parameters': {'properties': {}, 'type': 'object'}}}]}, config={}, config_factories=[])\n</code></pre> <p>You can also use the method <code>get_model_with_tools</code> to get the tool-bound model with any additional tools. The <code>invoke</code>, <code>stream</code>, <code>chat</code>, and <code>chat_stream</code> methods all use this under-the hood so you can add any tools, toolkits, or tool factories to the model at invokation.</p> <pre><code>chatbot.get_model_with_tools(tools=None)\n</code></pre> <pre><code>(RunnableBinding(bound=ChatOpenAI(client=&lt;openai.resources.chat.completions.Completions object at 0x128006a80&gt;, async_client=&lt;openai.resources.chat.completions.AsyncCompletions object at 0x1280306e0&gt;, root_client=&lt;openai.OpenAI object at 0x10f153a40&gt;, root_async_client=&lt;openai.AsyncOpenAI object at 0x128006ae0&gt;, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), kwargs={'tools': [{'type': 'function', 'function': {'name': 'check_new_messages', 'description': 'Check messages.', 'parameters': {'properties': {}, 'type': 'object'}}}]}, config={}, config_factories=[]),\n ToolLookup(tools={'check_new_messages': StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10f957ce0&gt;)}))\n</code></pre> <p>Tools will be automatically used when we call any of the invoke or stream methods.</p> <p>Notice that the LLM behaves normally if the user's prompts are unrelated to the tool.</p> <pre><code>chatbot.invoke('Hello world!')\n</code></pre> <pre><code>ChatResult(content=Hello! How can I assist you today?, tool_calls=[])\n</code></pre> <p>If the LLM \"decides\" that the user needs to execute a tool, it returns a tool call as the response instead of returning content.</p> <pre><code>result = chatbot.invoke('Check my messages.')\nresult\n</code></pre> <pre><code>ChatResult(content=, tool_calls=[ToolCallInfo(id='call_ngajeroEwfXipobUvG6sPNxd', name='check_new_messages', type='tool_call', args={}, tool=StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10f957ce0&gt;))])\n</code></pre> <p>The tool call information can be accessed through the <code>ChatResult.tool_calls</code> attribute, which is simply a list supertype. Use <code>tool_info_str</code> to clearly show the arguments being passed to the function.</p> <pre><code>for tc in result.tool_calls:\n    print(tc.tool_info_str())\n</code></pre> <pre><code>check_new_messages()\n</code></pre> <p>You may also provide additional tools at the time of invoking the LLM, and it will be treated as if it was part of the chatbot. </p> <p>In this example, we create a new tool with two arguments that must be provided by the LLM.</p> <pre><code>@langchain_core.tools.tool\ndef send_message(recipient: str, text: str) -&gt; str:\n    '''Send messages to others.'''\n    return f'Message sent!'\n\nresult = chatbot.invoke('Send a message to Bob saying \"Hello!\"', tools=[send_message])\nresult\n</code></pre> <pre><code>ChatResult(content=, tool_calls=[ToolCallInfo(id='call_p4znAVb29LTFT6TF8qnkG1NU', name='send_message', type='tool_call', args={'recipient': 'Bob', 'text': 'Hello!'}, tool=StructuredTool(name='send_message', description='Send messages to others.', args_schema=&lt;class 'langchain_core.utils.pydantic.send_message'&gt;, func=&lt;function send_message at 0x12804bb00&gt;))])\n</code></pre> <p>You can see that the LLM provided the <code>recipient</code> and <code>text</code> arguments which were passed to the function call information.</p> <pre><code>result.tool_calls[0].tool_info_str()\n</code></pre> <pre><code>'send_message(recipient=Bob, text=Hello!)'\n</code></pre> <p>You can adjust behavior using the <code>tool_choice</code> argument in the chatbot constructor or at invokation. The value <code>'any'</code> means that a tool MUST be called, but all tools are candidates. The value <code>'auto'</code> (the default) allows the LLM to reply with normal content rather than a tool call, and you can also pass the name of a specific function as well.</p> <pre><code>result = chatbot.invoke('Go to the store for me!', tool_choice='any')\nresult.tool_calls[0].tool_info_str()\n</code></pre> <pre><code>'check_new_messages()'\n</code></pre>"},{"location":"examples/b-tool_calling/#executing-tools","title":"Executing Tools","text":"<p>Tools allow the LLM to determine if and when to execute tools and also provides parameters for the tool call based on conversation history, but the user containing function is responsible for actually executing the tool with the arguments from the LLM.</p> <p>Use the <code>execute_tools</code> method to actually execute the tool, which returns a mapping of tool names to <code>ToolCallResult</code> objects.</p> <pre><code>result = chatbot.invoke('Check my messages.')\nresult.tool_calls[0].tool_info_str()\n</code></pre> <pre><code>'check_new_messages()'\n</code></pre> <pre><code>tr = result.execute_tools()\ntr\n</code></pre> <pre><code>{'check_new_messages': ToolCallResult(info=ToolCallInfo(id='call_sOvFP85Zw090E9xin3c74uCl', name='check_new_messages', type='tool_call', args={}, tool=StructuredTool(name='check_new_messages', description='Check messages.', args_schema=&lt;class 'langchain_core.utils.pydantic.check_new_messages'&gt;, func=&lt;function check_new_messages at 0x10f957ce0&gt;)), return_value='No new messages.')}\n</code></pre> <p>Get the return value from the tool through the <code>return_value</code> property.</p> <pre><code>tr['check_new_messages'].return_value\n</code></pre> <pre><code>'No new messages.'\n</code></pre> <p>Extracting tool calls from a <code>StreamResult</code> is a little more complicated because the stream must be exhausted before executing tools. This happens because the tool call information replaces the text response, so the streamer is essentially receiving chunks of the function call information until exhaustion.</p> <p>The calling function must handle both the streamed output and tool calls.</p> <pre><code>stream = chatbot.stream('Check my messages.')\nfor r in stream:\n    print(r, end='', flush=True)\nif len(stream.tool_calls) &gt; 0:\n    stream.execute_tools()\n</code></pre> <pre><code>content='' additional_kwargs={'tool_calls': [{'index': 0, 'id': 'call_8MqiTmWRcqC9xjVUqzY1sq2P', 'function': {'arguments': '', 'name': 'check_new_messages'}, 'type': 'function'}]} response_metadata={} id='run-825b8400-30dd-4d02-ac24-47d0cc9c2cac' tool_calls=[{'name': 'check_new_messages', 'args': {}, 'id': 'call_8MqiTmWRcqC9xjVUqzY1sq2P', 'type': 'tool_call'}] tool_call_chunks=[{'name': 'check_new_messages', 'args': '', 'id': 'call_8MqiTmWRcqC9xjVUqzY1sq2P', 'index': 0, 'type': 'tool_call_chunk'}]content='' additional_kwargs={'tool_calls': [{'index': 0, 'id': None, 'function': {'arguments': '{}', 'name': None}, 'type': None}]} response_metadata={} id='run-825b8400-30dd-4d02-ac24-47d0cc9c2cac' tool_calls=[{'name': '', 'args': {}, 'id': None, 'type': 'tool_call'}] tool_call_chunks=[{'name': None, 'args': '{}', 'id': None, 'index': 0, 'type': 'tool_call_chunk'}]content='' additional_kwargs={} response_metadata={'finish_reason': 'tool_calls', 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_bd83329f63'} id='run-825b8400-30dd-4d02-ac24-47d0cc9c2cac'\n</code></pre> <p>A <code>ValueError</code> will be raised if the caller tries to execute tools before the stream is exhausted.</p> <pre><code>stream = chatbot.stream('Check my messages.')\nfor r in stream:\n    print(r.content, end='', flush=True)\n    break\ntry:\n    stream.execute_tools()\nexcept ValueError as e:\n    print('Exception was caught!')\n</code></pre> <pre><code>Exception was caught!\n</code></pre>"},{"location":"examples/b-tool_calling/#toolkits-and-tool-factories","title":"Toolkits and Tool Factories","text":"<p>Aside from providing a list of tools, you may also bind tools from toolkits and tool factories.</p> <ul> <li> <p><code>ToolKit</code>: class with a <code>get_tools() -&gt; list[BaseTool]</code> method. <code>ToolKit</code>s are part of the langchain interface, and the built-in tools often come as a subtype. Passed through the <code>toolkits: list[BaseToolkit]</code> argument.</p> </li> <li> <p>Tool Factories: functions that accept a chatbot as an argument and return tools. Useful when writing tools that interact with the original LLM because otherwise it would require partial initialization. Passed through the <code>tool_factories: ToolFactoryType</code> argument.</p> </li> </ul> <p>Note that these too may be provided at instantiation or at invokation.</p>"},{"location":"examples/b-tool_calling/#toolkit-example","title":"<code>ToolKit</code> Example","text":"<p>In this example, I enable the built-in Langchain <code>FileManagementToolkit</code> toolkit to allow the chatbot to list, read, and write files.</p> <pre><code>import tempfile\nfrom langchain_community.agent_toolkits import FileManagementToolkit\nwith tempfile.TemporaryDirectory() as wd:\n    file_tk = FileManagementToolkit(root_dir=str(wd))\n    result = chatbot.invoke('List the files in this directory.', toolkits=[file_tk])\n    print(result.tool_calls[0].tool_info_str())\n</code></pre> <pre><code>list_directory()\n</code></pre>"},{"location":"examples/b-tool_calling/#tool-factory-examples","title":"Tool Factory Examples","text":"<p>Now I create a tool factory that can be passed to the chatbot. This tool uses the chatbot reference to invoke the LLM with access to all of the same tools.</p> <pre><code>\ndef my_tool_factory(chatbot: simplechatbot.ChatBot) -&gt; list[langchain_core.tools.Tool]:\n    @langchain_core.tools.tool\n    def story_generator(topic: str) -&gt; str:\n        '''Generate a story absed on a particular topic.'''\n        result = chatbot.invoke(\n            f'Generate a story about {topic}. Your response should only include the text of the story and make it short but engaging.',\n        )\n        return result.content\n\n    return [story_generator]\n\nresult = chatbot.invoke('Generate a story about western cowboys.', tool_factories=[my_tool_factory])\ntc_result = result.execute_tools()\ntc_result['story_generator'].return_value\n</code></pre> <pre><code>'In the dusty town of Dry Gulch, the sun hung low in the sky, casting long shadows over the wooden saloons and weathered storefronts. The air was thick with the scent of leather and gunpowder, a reminder of the untamed land that surrounded the settlement. It was here that two rival cowboys, Jake \u201cIron\u201d McGraw and Sam \u201cQuickshot\u201d Riley, were destined to cross paths.\\n\\nJake was known for his iron will and unmatched strength, while Sam earned his reputation as the fastest draw in the West. Their rivalry had begun years ago over a beautiful saloon owner, Clara, who had captured both their hearts with her fiery spirit. But Clara had made her choice, and it only intensified the flames of their competition.\\n\\nOne fateful afternoon, the townsfolk gathered in the dusty square, whispering tales of the upcoming showdown. With the sun dipping low, casting a golden hue over the landscape, Jake and Sam faced each other, eyes locked in a battle of wills. The tension was palpable, and the crowd held its breath.\\n\\n\u201cToday, we settle this once and for all,\u201d Jake growled, his hand hovering near his holster. Sam smirked, confidence radiating from him. \u201cI\u2019ve been waiting for this, Iron. Let\u2019s see if you can keep up.\u201d\\n\\nWith a single, thunderous clap of thunder, the duel began. Dust swirled around them as they moved like lightning, drawing their guns in a heartbeat. Shots rang out, echoing across the canyon. But in a twist of fate, both cowboys hesitated, their eyes catching Clara\u2019s pleading gaze from the crowd.\\n\\nIn that moment, they realized the futility of their rivalry. The guns lowered, and silence fell. Clara rushed forward, tears in her eyes. \u201cEnough! This isn\u2019t what I wanted!\u201d\\n\\nWith a shared look of understanding, Jake and Sam holstered their weapons. They turned to Clara, and together, they walked away from the battlefield, leaving behind the echoes of their past and forging a new path of friendship. The sun set over Dry Gulch, casting a warm glow as the three of them rode into the horizon, united against the world.'\n</code></pre>"},{"location":"examples/b-tool_calling/#conclusions","title":"Conclusions","text":"<p>That is all! Now you know how to enable and disable tools that your LLM can use to do anything!</p>"},{"location":"examples/c-model_specific_chatbots/","title":"Model-specific ChatBots","text":"<p>While <code>ChatBot</code> instances can be created from any Langchain Chat interface, we created some convenient superclasses that have varying levels of model-specific behavior.</p> <p>Model-specific chatbots only differ from <code>ChatBot</code> in that they define static factory constructor methods, all named <code>new</code>. As each chat model needs to be installed separately, they must be accessed via separate imports.</p> <pre><code>import sys\nsys.path.append('..')\n\nimport simplechatbot\n</code></pre> <p>I will use the keychain to manage API keys for OpenAI and Mistral.</p> <pre><code>keychain = simplechatbot.APIKeyChain.from_json_file('../keys.json')\n</code></pre> <p>Notice that we use a separate import statement to explicitly import the model-specific chatbots.</p> <pre><code>from simplechatbot.ollama import OllamaChatBot\n\nchatbot = OllamaChatBot.new(\n    model_name = 'llama3.1', \n)\n</code></pre> <pre><code>from simplechatbot.openai import OpenAIChatBot\n\nchatbot = OpenAIChatBot.new(\n    model_name = 'gpt-4o-mini', \n    api_key=keychain['openai'],\n)\n</code></pre> <pre><code>from simplechatbot.mistral import MistralChatBot\n\nchatbot = MistralChatBot.new(\n    model_name = 'mistral-large-latest', \n    api_key=keychain['mistral'],\n)\n</code></pre>"},{"location":"examples/d_multi-agent_example/","title":"Multi-agent Examples","text":"<p>In this example I show an example of an agent that writes a story using a series of steps.</p> <ol> <li>The user provides an idea for their story.</li> <li>The <code>Outline Bot</code> generates an outline for the story including section titles and descriptions.</li> <li>The first section content is created by the <code>Story Bot</code> from section title/description and the overall story description.</li> <li>The <code>Summary Bot</code> creates a summary of the newly generated chapter.</li> <li>The section summary is passed to the <code>Story Bot</code> along with section title/description to generate the next section.</li> <li>All sections follow steps 3-5. ...</li> <li>The sections are combined into a full story.</li> </ol> <p></p> <pre><code>import sys\nsys.path.append('..')\n\nimport simplechatbot\nfrom simplechatbot.openai import OpenAIChatBot\n</code></pre> <p>First I create a new chatbot from OpenAI using the API stored in the keychain file.</p> <p>I also create a new function <code>stream_it</code> that prints the result from the LLM as it is received and returns the full result of the LLM call.</p> <pre><code>keychain = simplechatbot.APIKeyChain.from_json_file('../keys.json')\nbase_chatbot = OpenAIChatBot.new(\n    model_name = 'gpt-4o-mini', \n    api_key=keychain['openai'],\n)\n\ndef stream_it(chatbot: simplechatbot.ChatBot, msg: str | None = None) -&gt; simplechatbot.ChatResult:\n    stream = chatbot.chat_stream(msg, add_to_history=False)\n    for chunk in stream:\n        print(chunk.content, end='', flush=True)\n    return stream.collect()\n</code></pre> <p>Next we need to direct the LLM to create an outline for the story. I do this by creating a system prompt describing the task of creating an outline and a pydantic class to direct the LLM on how to structure its response. This is important because the output of the outline bot will be used for generating chapters.</p> <pre><code>import pydantic\n\nfrom typing import Optional\n\n#from pydantic import BaseModel, Field\nimport pydantic\n\nclass StoryOutline(pydantic.BaseModel):\n    \"\"\"Outline of the story.\"\"\"\n\n    story_topic: str = pydantic.Field(description=\"The topic of the story.\")\n\n    part1_title: str = pydantic.Field(description=\"Title of Part 1 of the story.\")\n    part1_description: str = pydantic.Field(description=\"Longer description of part 1.\")\n\n    part2_title: str = pydantic.Field(description=\"Title of Part 2 of the story.\")\n    part2_description: str = pydantic.Field(description=\"Longer description of part 2.\")\n\n    part3_title: str = pydantic.Field(description=\"Title of Part 3 of the story.\")\n    part3_description: str = pydantic.Field(description=\"Longer description of part 3.\")\n\n    def outline_str(self) -&gt; str:\n        return f'topic: {self.story_topic}\\n\\n{self.part1_title}: {self.part1_description}\\n\\n{self.part2_title}: {self.part2_description}\\n\\n{self.part3_title}: {self.part3_description}'\n\n\nsystem_prompt = '''\nThe user will provide you a description of a story, and you must create a chapter outline with titles and brief descriptions.\nEach section should contain a title and a brief description of what happens in that section.\nThe sections should all be part of a single narrative ark, but each section should have a complete beginning, middle, and end.\n'''\noutline_bot = base_chatbot.structbot_from_model(\n    output_structure=StoryOutline,\n    system_prompt=system_prompt,\n)\n\nq = f'Write an outline for a story about two friends who met when they were young and then lost touch. They meet again as adults and have to navigate their new relationship.'\noutline: StoryOutline = outline_bot._model.with_structured_output(StoryOutline).invoke(q)\nprint(outline.outline_str())\n</code></pre> <pre><code>topic: Rekindling Friendship\n\nThe Innocent Beginning: Two children, Emma and Jack, meet at a summer camp and quickly form a deep and meaningful friendship. They spend their days exploring the woods, sharing secrets, and dreaming about the future. However, as summer ends, their paths diverge, and they lose touch as they go back to their separate lives.\n\nYears Apart: As the years pass, Emma and Jack grow up in different cities, each facing their own challenges. Emma pursues a career in art, while Jack becomes a successful entrepreneur. Despite their busy lives, they occasionally think about each other, reminiscing about their childhood friendship but never reaching out.\n\nUnexpected Reunion: Fate brings Emma and Jack back together at a mutual friend's wedding. Their initial joy is tinged with awkwardness as they realize how much they have changed. They spend the weekend reconnecting, sharing their life stories, and navigating the complexities of their new adult relationship, ultimately deciding whether to rekindle their friendship or go their separate ways once again.\n</code></pre> <p>Next we create a bot that will generate the actual chapter content based on information generated in the outline and a summary of the previous chapter (if one exists).</p> <pre><code>chapter_bot_system_prompt = f'''\nYou are designed to write a single chapter of a larger story based on the following information:\n\n+ Overall story topic: The topic of the full story.\n+ Chapter title: The title of the section you are writing.\n+ Chapter description: A longer description of what happens in the section.\n+ (optional) previous chapter summary: A summary of the previous chapter.\n\nYour responses should only include text that is part of the story. Do not include the chapter title \nor any other information that is not part of the story itself.\n'''\n\ndef chapter_bot_prompt(\n    story_topic: str,\n    chapter_title: str,\n    chapter_description: str,\n    previous_chapter_summary: Optional[str] = None,\n) -&gt; str:\n    return f'''\n    General story topic: \"{story_topic}\"\n\n    Section title: \"{chapter_title}\"\n\n    Description: \"{chapter_description}\"\n\n    Previous chapter summary: \"{previous_chapter_summary if previous_chapter_summary is not None else 'No previous chapter - this is the first!'}\"\n    '''\n\nchapter_bot = base_chatbot.empty().clone(\n    system_prompt=chapter_bot_system_prompt,\n)\n</code></pre> <p>Now we actually create the chatper using the prompt.</p> <pre><code>cb1 = base_chatbot.empty().clone(\n    system_prompt=system_prompt,\n)\nprompt = chapter_bot_prompt(outline.story_topic, outline.part1_title, outline.part1_description)\nchapter1 = stream_it(chapter_bot, prompt)\n</code></pre> <pre><code>The sun dipped low on the horizon, casting a warm golden hue over Maplewood Park, where the gentle rustle of leaves danced with the laughter of children playing nearby. It was a place that once brimmed with memories for Emma and Jake, two childhood friends who had drifted apart over the years, consumed by the tides of life.\n\nEmma sat on a weathered wooden bench, her sketchbook resting on her lap, the pages blank but for a few light pencil lines that hinted at her longing to capture the beauty around her. She had come to the park to find inspiration, but what she found instead was a wave of nostalgia that threatened to engulf her. She remembered the countless afternoons spent here, sketching the trees and laughing until their sides hurt.\n\nAs she drew absentmindedly, a familiar voice broke through her reverie. \u201cIs that you, Emma?\u201d\n\nStartled, she looked up to find Jake standing a few paces away, his hair tousled and a bright smile lighting up his face. He had changed since the last time she saw him\u2014taller, with a more confident demeanor, but his eyes still sparkled with the same mischief she remembered.\n\n\u201cJake! I didn\u2019t expect to see you here,\u201d Emma replied, her heart racing as she closed her sketchbook.\n\n\u201cI could say the same,\u201d he chuckled, taking a seat beside her. \u201cI\u2019ve been wandering around, trying to find a place to clear my head. It seems like we both chose the same spot.\u201d\n\nA moment of silence hung in the air, both of them unsure of how to bridge the gap that time had created. Emma glanced at her sketchbook, then at Jake, contemplating whether to bring up the past or keep it buried.\n\n\u201cSo, what are you working on?\u201d Jake asked, breaking the tension.\n\n\u201cOh, just some doodles. I haven\u2019t done much lately,\u201d she admitted, feeling a little self-conscious. \u201cIt\u2019s been a while since I\u2019ve had the time.\u201d\n\n\u201cI remember you used to spend hours drawing. You always had the best ideas,\u201d he said, genuine admiration in his voice.\n\nEmma smiled, warmth spreading through her. \u201cYeah, I guess I lost track of it all. Life got busy, you know?\u201d\n\n\u201cTell me about it. I\u2019ve been swamped with work and\u2026well, everything else,\u201d Jake replied, his gaze drifting to the children playing tag nearby. \u201cBut I\u2019ve missed this place. It feels good to be back.\u201d\n\n\u201cYeah, it does,\u201d Emma agreed, looking around. The park was alive with the sounds of laughter and the smell of fresh grass. It was comforting and familiar, a reminder of simpler times.\n\n\u201cDo you remember that time we tried to build a treehouse?\u201d Jake suddenly exclaimed, laughter bubbling forth. \u201cWe thought we could start a business!\u201d\n\n\u201cOf course! We barely got past the first few branches!\u201d Emma chuckled, shaking her head at the memory. \u201cBut we had the best summer planning it.\u201d\n\nAs they reminisced, the shadows grew longer, and a sense of ease began to settle between them. The laughter flowed more freely now as stories spilled out, each memory acting as a thread, weaving their friendship back together.\n\n\u201cI\u2019ve missed this, you know?\u201d Jake said after a while, his tone turning more serious. \u201cI\u2019ve missed you.\u201d\n\nEmma\u2019s heart skipped a beat. \u201cI\u2019ve missed you too, Jake. I didn\u2019t realize how much until now.\u201d\n\nThe park was quieting down, the vibrant colors of the sunset merging into deeper shades of orange and purple. They sat side by side, the weight of unspoken words hanging in the air, yet feeling lighter with each shared story. In that moment, under the vast canvas of the changing sky, Emma realized that perhaps this was the innocent beginning of something new\u2014an opportunity to rekindle their friendship and rediscover the connection that had once been so vivid.\n\nAs they stood to leave, Jake turned to her with a hopeful smile. \u201cHow about we make a pact to come back here more often? I mean, if you\u2019re up for it.\u201d\n\n\u201cI\u2019d like that,\u201d Emma replied, her heart swelling with anticipation. \u201cLet\u2019s not let life get in the way again.\u201d\n\nWith one last glance at the park, they walked away together, laughter mingling with the soft whispers of the evening breeze, the first steps toward rebuilding a friendship that had once felt lost but was now just waiting to be rediscovered.\n</code></pre> <p>Next I create a bot that will summarize a chapter. We will eventually feed this into the creation of chapter 2.</p> <pre><code>summary_bot_system_prompt = f'''\nYou need to create a summary of the story chapter provided to you by the user.\nThe summary should include names of relevant characters and capture the story arc of the chapter.\n'''\nsummary_bot = base_chatbot.empty().clone(\n    system_prompt=summary_bot_system_prompt,\n)\nch1_summary = stream_it(summary_bot, f'Chapter text:\\n\\n{chapter1.content}')\n</code></pre> <pre><code>In this chapter, the setting is Maplewood Park, where Emma, a passionate artist, seeks inspiration but instead finds herself engulfed in nostalgia. While sitting on a bench, she unexpectedly reunites with her childhood friend, Jake. They share a warm exchange filled with memories of their past, including a humorous recollection of a failed treehouse business they attempted to start in their youth. Their conversation gradually bridges the gap created by years of separation, revealing their mutual longing for the connection they once had.\n\nAs they reminisce, both characters express how much they've missed each other, leading to a rekindling of their friendship. The chapter captures the idyllic atmosphere of the park, filled with laughter and memories, and concludes with a hopeful pact between Emma and Jake to return to the park more often, indicating their desire to not let life interfere with their bond again. The chapter beautifully illustrates the themes of nostalgia, reconnection, and the promise of new beginnings in their friendship.\n</code></pre> <p>Now we actually generate the second chapter using the outline and the previous chapter summary.</p> <pre><code>prompt = chapter_bot_prompt(\n    outline.story_topic,\n    outline.part2_title,\n    outline.part2_description,\n    ch1_summary.content,\n)\nchapter2 = stream_it(chapter_bot, prompt)\n</code></pre> <pre><code>The sun dipped lower in the sky, casting a warm golden hue over Maplewood Park. The sounds of laughter and the rustle of leaves created a serene backdrop as Emma and Jake settled into the rhythm of their conversation. Time seemed to melt away as they navigated through a labyrinth of memories, each twist and turn revealing shared secrets and unspoken words.\n\n\u201cI can\u2019t believe we actually thought we could build that treehouse,\u201d Jake chuckled, shaking his head. \u201cI remember us drawing out blueprints on the back of that cereal box.\u201d\n\nEmma laughed, her eyes sparkling with joy. \u201cAnd we had the audacity to charge the neighborhood kids for entry! I think we made a whole twenty cents before it collapsed.\u201d\n\n\u201cTwenty cents we earned through sheer ambition,\u201d Jake replied, grinning. \u201cI still say it was a brilliant business model.\u201d\n\nTheir laughter echoed through the park, and for a moment, it felt as if the years melted away. The weight of their separate lives\u2014filled with college, jobs, and new friendships\u2014lifted, leaving only the essence of who they had been. As they shared stories of their lives since that fateful day, a blend of nostalgia and curiosity filled the air.\n\n\u201cSo, what\u2019s the biggest change for you?\u201d Emma asked, tilting her head slightly, a playful smile dancing on her lips.\n\nJake hesitated for a moment, his expression shifting to one of reflection. \u201cHonestly? I think it\u2019s realizing how much I miss having a true friend. I\u2019ve been so focused on work and moving forward that I forgot how much joy comes from just hanging out with someone who knows you inside and out.\u201d\n\nEmma nodded, her heart swelling with warmth. \u201cI feel the same way. After college, I got caught up in my art and lost touch with everyone. I thought I was happy, but it was like painting in a vacuum\u2014there was no one to share it with.\u201d\n\nAs they spoke, the park around them transformed, the vibrant colors of autumn leaves mirroring the rekindling of their friendship. Each shared memory was a brushstroke, painting a picture of who they had once been and who they could become again.\n\n\u201cDo you remember that camping trip we took with our parents?\u201d Jake asked suddenly, a glimmer of mischief in his eyes. \u201cYou were convinced you could catch a fish with your bare hands.\u201d\n\nEmma giggled, the memory flooding back. \u201cAnd I ended up falling into the lake instead! I think I spent the rest of the trip shivering in my sleeping bag.\u201d\n\n\u201cYeah, and we had to listen to your dad\u2019s terrible campfire songs to keep us warm.\u201d\n\nThe laughter that followed was rich and hearty, a sound that felt like home. It was clear that their bond had weathered the storm of years apart. The awkwardness that often accompanies reconnections was absent; instead, it was as if they had simply paused the conversation and picked it up right where they left off.\n\nAs the sun began to set, casting long shadows across the park, Emma looked at Jake, her expression serious for a moment. \u201cI don\u2019t want to lose this again, you know? Life has a way of pulling us in different directions.\u201d\n\nJake nodded, his gaze steady. \u201cNeither do I. Let\u2019s make a promise to meet here regularly. We can\u2019t let the world get in the way of our friendship again.\u201d\n\nA pact was formed in that moment, an unspoken understanding that they would do whatever it took to nurture this connection. They exchanged contact information, both eager to bridge the distance that had grown between them over the years.\n\nAs they stood to leave, the park seemed to shimmer with possibility. It was more than just a gathering place; it was a new beginning, a canvas waiting to be filled with memories yet to come. Emma took a deep breath, the crisp air filling her lungs, and smiled at Jake, feeling a renewed sense of hope.\n\n\u201cUntil next time,\u201d she said, her heart light.\n\n\u201cUntil next time,\u201d Jake echoed, excitement bubbling beneath his calm exterior as they walked together, side by side, ready to face the world anew.\n</code></pre> <p>Create a summary for chapter 2 now.</p> <pre><code>ch2_summary = stream_it(summary_bot, f'Previous chapter text:\\n\\n{chapter1.content}')\n</code></pre> <pre><code>In this chapter, Emma and Jake, childhood friends who have grown apart, unexpectedly reunite at Maplewood Park, a place filled with their shared memories. Emma, seeking inspiration for her art, finds herself reminiscing about their past when Jake approaches her, sparking a conversation filled with nostalgia and warmth. They share stories of their childhood adventures, including a humorous attempt to build a treehouse, which brings laughter and eases the tension between them.\n\nAs they reconnect, both express how much they've missed each other, realizing the significance of their friendship that time had frayed. The atmosphere shifts from a sense of loss to a hopeful promise of rekindling their bond. Jake proposes that they return to the park more often, and Emma eagerly agrees, indicating a desire to not let life interfere with their relationship again. The chapter concludes with them leaving the park together, laughter in the air, symbolizing the first steps toward rebuilding their friendship.\n</code></pre> <p>Use the summary of chapter 2 and outline information to create chapter 3.</p> <pre><code>prompt = chapter_bot_prompt(\n    outline.story_topic,\n    outline.part2_title,\n    outline.part2_description,\n    ch2_summary.content,\n)\nchapter3 = stream_it(chapter_bot, prompt)\n</code></pre> <pre><code>The following weeks felt like a dream to Emma. Each time she returned to Maplewood Park, the familiar sights and sounds wrapped around her like a warm blanket. The vibrant greens of the leaves, the laughter of children echoing in the distance, and the sweet scent of blooming flowers all reminded her of the happiness she had shared with Jake. It was as if time had folded in on itself, allowing them to reclaim a part of their lives that had been set aside for far too long.\n\nTheir meetups became a ritual. They would stroll through the park, sharing stories about their lives since they had last seen each other. Jake spoke about his job at the local theater, his passion for acting igniting with every word. Emma found herself captivated, her heart swelling with pride for her friend. She shared her struggles as an artist, the challenges of finding her voice and the pressure to succeed. Jake listened intently, offering encouragement that felt like a lifeline.\n\nOne sunny afternoon, as they sat on a bench overlooking the pond, Emma let her fingers dance over her sketchbook. She had begun to fill it with drawings inspired by their time together\u2014each sketch a testament to the rekindled bond they were building. A quick glance at Jake revealed his eyes sparkling with interest, his curiosity piqued by the art that flowed from her heart.\n\n\u201cWhat are you working on?\u201d he asked, leaning closer.\n\nEmma hesitated, a wave of self-doubt washing over her. \u201cJust some ideas\u2026 nothing special,\u201d she replied, trying to downplay her efforts.\n\nJake tilted his head, his expression earnest. \u201cC\u2019mon, show me. I want to see what you\u2019ve been creating.\u201d\n\nWith a deep breath, Emma turned the sketchbook toward him. The first image was of the tree they had attempted to build their treehouse in all those years ago, its branches reaching toward the sky like an invitation to play.\n\nJake chuckled, nostalgia brightening his face. \u201cI can\u2019t believe we thought we could actually build that thing. We were such dreamers.\u201d\n\nEmma smiled, her heart fluttering at the sight of his amusement. \u201cWe still are, aren\u2019t we?\u201d\n\nThe conversation flowed easily, punctuated by laughter and the occasional comfortable silence. But beneath the surface, Emma felt a tension building\u2014a fear of losing this newfound connection. Memories of their past, woven with moments of laughter and tears, threatened to unravel at the seams of her heart.\n\nAs they watched the sunset paint the sky in hues of orange and pink, Emma took a chance. \u201cYou know, I\u2019ve missed this. Not just you, but\u2026 us. I didn\u2019t realize how much I needed a friend like you in my life again.\u201d\n\nJake turned to her, his expression serious. \u201cMe too. I thought those days were gone forever. But now, I can\u2019t imagine not having you around.\u201d\n\nThe vulnerability in his voice struck a chord within her, and Emma nodded, her heart racing. \u201cLet\u2019s promise to keep doing this. No matter where life takes us. I don\u2019t want to lose you again.\u201d\n\nHe reached for her hand, a simple gesture that spoke volumes. \u201cI promise, Emma. We\u2019ll make this work.\u201d\n\nIn that moment, as the sun dipped below the horizon, they sealed their pact with a shared glance that spoke of hope and renewed commitment. The years apart had been filled with silence, but now, in the glow of friendship reignited, they were ready to weave new stories together.\n\nAs they walked back through the park, the sounds of the evening wrapped around them, a symphony of cicadas and rustling leaves. Emma felt lighter, as if the weight of the past had been lifted, replaced by the promise of a future filled with laughter, art, and companionship.\n\nAnd for the first time in years, she felt truly free.\n</code></pre> <p>And now we can review the full text of the book.</p> <pre><code>story = f'''\n\nOverview: {outline.story_topic}\n\n== Chapter 1: {outline.part1_title} ==\n\n{chapter1.content}\n\n\n== Chapter 2: {outline.part2_title} ==\n\n{chapter2.content}\n\n\n== Chapter 3: {outline.part3_title} ==\n\n{chapter3.content}\n\n'''\n\nimport pprint\npprint.pprint(story)\n</code></pre> <pre><code>('\\n'\n '\\n'\n 'Overview: Rekindling Friendship\\n'\n '\\n'\n '== Chapter 1: The Innocent Beginning ==\\n'\n '\\n'\n 'The sun dipped low on the horizon, casting a warm golden hue over Maplewood '\n 'Park, where the gentle rustle of leaves danced with the laughter of children '\n 'playing nearby. It was a place that once brimmed with memories for Emma and '\n 'Jake, two childhood friends who had drifted apart over the years, consumed '\n 'by the tides of life.\\n'\n '\\n'\n 'Emma sat on a weathered wooden bench, her sketchbook resting on her lap, the '\n 'pages blank but for a few light pencil lines that hinted at her longing to '\n 'capture the beauty around her. She had come to the park to find inspiration, '\n 'but what she found instead was a wave of nostalgia that threatened to engulf '\n 'her. She remembered the countless afternoons spent here, sketching the trees '\n 'and laughing until their sides hurt.\\n'\n '\\n'\n 'As she drew absentmindedly, a familiar voice broke through her reverie. \u201cIs '\n 'that you, Emma?\u201d \\n'\n '\\n'\n 'Startled, she looked up to find Jake standing a few paces away, his hair '\n 'tousled and a bright smile lighting up his face. He had changed since the '\n 'last time she saw him\u2014taller, with a more confident demeanor, but his eyes '\n 'still sparkled with the same mischief she remembered.\\n'\n '\\n'\n '\u201cJake! I didn\u2019t expect to see you here,\u201d Emma replied, her heart racing as '\n 'she closed her sketchbook. \\n'\n '\\n'\n '\u201cI could say the same,\u201d he chuckled, taking a seat beside her. \u201cI\u2019ve been '\n 'wandering around, trying to find a place to clear my head. It seems like we '\n 'both chose the same spot.\u201d\\n'\n '\\n'\n 'A moment of silence hung in the air, both of them unsure of how to bridge '\n 'the gap that time had created. Emma glanced at her sketchbook, then at Jake, '\n 'contemplating whether to bring up the past or keep it buried. \\n'\n '\\n'\n '\u201cSo, what are you working on?\u201d Jake asked, breaking the tension.\\n'\n '\\n'\n '\u201cOh, just some doodles. I haven\u2019t done much lately,\u201d she admitted, feeling a '\n 'little self-conscious. \u201cIt\u2019s been a while since I\u2019ve had the time.\u201d\\n'\n '\\n'\n '\u201cI remember you used to spend hours drawing. You always had the best ideas,\u201d '\n 'he said, genuine admiration in his voice. \\n'\n '\\n'\n 'Emma smiled, warmth spreading through her. \u201cYeah, I guess I lost track of it '\n 'all. Life got busy, you know?\u201d\\n'\n '\\n'\n '\u201cTell me about it. I\u2019ve been swamped with work and\u2026well, everything else,\u201d '\n 'Jake replied, his gaze drifting to the children playing tag nearby. \u201cBut '\n 'I\u2019ve missed this place. It feels good to be back.\u201d\\n'\n '\\n'\n '\u201cYeah, it does,\u201d Emma agreed, looking around. The park was alive with the '\n 'sounds of laughter and the smell of fresh grass. It was comforting and '\n 'familiar, a reminder of simpler times.\\n'\n '\\n'\n '\u201cDo you remember that time we tried to build a treehouse?\u201d Jake suddenly '\n 'exclaimed, laughter bubbling forth. \u201cWe thought we could start a business!\u201d\\n'\n '\\n'\n '\u201cOf course! We barely got past the first few branches!\u201d Emma chuckled, '\n 'shaking her head at the memory. \u201cBut we had the best summer planning it.\u201d\\n'\n '\\n'\n 'As they reminisced, the shadows grew longer, and a sense of ease began to '\n 'settle between them. The laughter flowed more freely now as stories spilled '\n 'out, each memory acting as a thread, weaving their friendship back '\n 'together.\\n'\n '\\n'\n '\u201cI\u2019ve missed this, you know?\u201d Jake said after a while, his tone turning more '\n 'serious. \u201cI\u2019ve missed you.\u201d\\n'\n '\\n'\n 'Emma\u2019s heart skipped a beat. \u201cI\u2019ve missed you too, Jake. I didn\u2019t realize '\n 'how much until now.\u201d\\n'\n '\\n'\n 'The park was quieting down, the vibrant colors of the sunset merging into '\n 'deeper shades of orange and purple. They sat side by side, the weight of '\n 'unspoken words hanging in the air, yet feeling lighter with each shared '\n 'story. In that moment, under the vast canvas of the changing sky, Emma '\n 'realized that perhaps this was the innocent beginning of something new\u2014an '\n 'opportunity to rekindle their friendship and rediscover the connection that '\n 'had once been so vivid.\\n'\n '\\n'\n 'As they stood to leave, Jake turned to her with a hopeful smile. \u201cHow about '\n 'we make a pact to come back here more often? I mean, if you\u2019re up for it.\u201d\\n'\n '\\n'\n '\u201cI\u2019d like that,\u201d Emma replied, her heart swelling with anticipation. \u201cLet\u2019s '\n 'not let life get in the way again.\u201d\\n'\n '\\n'\n 'With one last glance at the park, they walked away together, laughter '\n 'mingling with the soft whispers of the evening breeze, the first steps '\n 'toward rebuilding a friendship that had once felt lost but was now just '\n 'waiting to be rediscovered.\\n'\n '\\n'\n '\\n'\n '== Chapter 2: Years Apart ==\\n'\n '\\n'\n 'The sun dipped lower in the sky, casting a warm golden hue over Maplewood '\n 'Park. The sounds of laughter and the rustle of leaves created a serene '\n 'backdrop as Emma and Jake settled into the rhythm of their conversation. '\n 'Time seemed to melt away as they navigated through a labyrinth of memories, '\n 'each twist and turn revealing shared secrets and unspoken words.\\n'\n '\\n'\n '\u201cI can\u2019t believe we actually thought we could build that treehouse,\u201d Jake '\n 'chuckled, shaking his head. \u201cI remember us drawing out blueprints on the '\n 'back of that cereal box.\u201d\\n'\n '\\n'\n 'Emma laughed, her eyes sparkling with joy. \u201cAnd we had the audacity to '\n 'charge the neighborhood kids for entry! I think we made a whole twenty cents '\n 'before it collapsed.\u201d\\n'\n '\\n'\n '\u201cTwenty cents we earned through sheer ambition,\u201d Jake replied, grinning. \u201cI '\n 'still say it was a brilliant business model.\u201d\\n'\n '\\n'\n 'Their laughter echoed through the park, and for a moment, it felt as if the '\n 'years melted away. The weight of their separate lives\u2014filled with college, '\n 'jobs, and new friendships\u2014lifted, leaving only the essence of who they had '\n 'been. As they shared stories of their lives since that fateful day, a blend '\n 'of nostalgia and curiosity filled the air.\\n'\n '\\n'\n '\u201cSo, what\u2019s the biggest change for you?\u201d Emma asked, tilting her head '\n 'slightly, a playful smile dancing on her lips.\\n'\n '\\n'\n 'Jake hesitated for a moment, his expression shifting to one of reflection. '\n '\u201cHonestly? I think it\u2019s realizing how much I miss having a true friend. I\u2019ve '\n 'been so focused on work and moving forward that I forgot how much joy comes '\n 'from just hanging out with someone who knows you inside and out.\u201d\\n'\n '\\n'\n 'Emma nodded, her heart swelling with warmth. \u201cI feel the same way. After '\n 'college, I got caught up in my art and lost touch with everyone. I thought I '\n 'was happy, but it was like painting in a vacuum\u2014there was no one to share it '\n 'with.\u201d\\n'\n '\\n'\n 'As they spoke, the park around them transformed, the vibrant colors of '\n 'autumn leaves mirroring the rekindling of their friendship. Each shared '\n 'memory was a brushstroke, painting a picture of who they had once been and '\n 'who they could become again.\\n'\n '\\n'\n '\u201cDo you remember that camping trip we took with our parents?\u201d Jake asked '\n 'suddenly, a glimmer of mischief in his eyes. \u201cYou were convinced you could '\n 'catch a fish with your bare hands.\u201d\\n'\n '\\n'\n 'Emma giggled, the memory flooding back. \u201cAnd I ended up falling into the '\n 'lake instead! I think I spent the rest of the trip shivering in my sleeping '\n 'bag.\u201d\\n'\n '\\n'\n '\u201cYeah, and we had to listen to your dad\u2019s terrible campfire songs to keep us '\n 'warm.\u201d\\n'\n '\\n'\n 'The laughter that followed was rich and hearty, a sound that felt like home. '\n 'It was clear that their bond had weathered the storm of years apart. The '\n 'awkwardness that often accompanies reconnections was absent; instead, it was '\n 'as if they had simply paused the conversation and picked it up right where '\n 'they left off.\\n'\n '\\n'\n 'As the sun began to set, casting long shadows across the park, Emma looked '\n 'at Jake, her expression serious for a moment. \u201cI don\u2019t want to lose this '\n 'again, you know? Life has a way of pulling us in different directions.\u201d\\n'\n '\\n'\n 'Jake nodded, his gaze steady. \u201cNeither do I. Let\u2019s make a promise to meet '\n 'here regularly. We can\u2019t let the world get in the way of our friendship '\n 'again.\u201d\\n'\n '\\n'\n 'A pact was formed in that moment, an unspoken understanding that they would '\n 'do whatever it took to nurture this connection. They exchanged contact '\n 'information, both eager to bridge the distance that had grown between them '\n 'over the years.\\n'\n '\\n'\n 'As they stood to leave, the park seemed to shimmer with possibility. It was '\n 'more than just a gathering place; it was a new beginning, a canvas waiting '\n 'to be filled with memories yet to come. Emma took a deep breath, the crisp '\n 'air filling her lungs, and smiled at Jake, feeling a renewed sense of '\n 'hope. \\n'\n '\\n'\n '\u201cUntil next time,\u201d she said, her heart light.\\n'\n '\\n'\n '\u201cUntil next time,\u201d Jake echoed, excitement bubbling beneath his calm '\n 'exterior as they walked together, side by side, ready to face the world '\n 'anew.\\n'\n '\\n'\n '\\n'\n '== Chapter 3: Unexpected Reunion ==\\n'\n '\\n'\n 'The following weeks felt like a dream to Emma. Each time she returned to '\n 'Maplewood Park, the familiar sights and sounds wrapped around her like a '\n 'warm blanket. The vibrant greens of the leaves, the laughter of children '\n 'echoing in the distance, and the sweet scent of blooming flowers all '\n 'reminded her of the happiness she had shared with Jake. It was as if time '\n 'had folded in on itself, allowing them to reclaim a part of their lives that '\n 'had been set aside for far too long.\\n'\n '\\n'\n 'Their meetups became a ritual. They would stroll through the park, sharing '\n 'stories about their lives since they had last seen each other. Jake spoke '\n 'about his job at the local theater, his passion for acting igniting with '\n 'every word. Emma found herself captivated, her heart swelling with pride for '\n 'her friend. She shared her struggles as an artist, the challenges of finding '\n 'her voice and the pressure to succeed. Jake listened intently, offering '\n 'encouragement that felt like a lifeline.\\n'\n '\\n'\n 'One sunny afternoon, as they sat on a bench overlooking the pond, Emma let '\n 'her fingers dance over her sketchbook. She had begun to fill it with '\n 'drawings inspired by their time together\u2014each sketch a testament to the '\n 'rekindled bond they were building. A quick glance at Jake revealed his eyes '\n 'sparkling with interest, his curiosity piqued by the art that flowed from '\n 'her heart. \\n'\n '\\n'\n '\u201cWhat are you working on?\u201d he asked, leaning closer. \\n'\n '\\n'\n 'Emma hesitated, a wave of self-doubt washing over her. \u201cJust some ideas\u2026 '\n 'nothing special,\u201d she replied, trying to downplay her efforts. \\n'\n '\\n'\n 'Jake tilted his head, his expression earnest. \u201cC\u2019mon, show me. I want to see '\n 'what you\u2019ve been creating.\u201d \\n'\n '\\n'\n 'With a deep breath, Emma turned the sketchbook toward him. The first image '\n 'was of the tree they had attempted to build their treehouse in all those '\n 'years ago, its branches reaching toward the sky like an invitation to '\n 'play. \\n'\n '\\n'\n 'Jake chuckled, nostalgia brightening his face. \u201cI can\u2019t believe we thought '\n 'we could actually build that thing. We were such dreamers.\u201d\\n'\n '\\n'\n 'Emma smiled, her heart fluttering at the sight of his amusement. \u201cWe still '\n 'are, aren\u2019t we?\u201d \\n'\n '\\n'\n 'The conversation flowed easily, punctuated by laughter and the occasional '\n 'comfortable silence. But beneath the surface, Emma felt a tension building\u2014a '\n 'fear of losing this newfound connection. Memories of their past, woven with '\n 'moments of laughter and tears, threatened to unravel at the seams of her '\n 'heart. \\n'\n '\\n'\n 'As they watched the sunset paint the sky in hues of orange and pink, Emma '\n 'took a chance. \u201cYou know, I\u2019ve missed this. Not just you, but\u2026 us. I didn\u2019t '\n 'realize how much I needed a friend like you in my life again.\u201d\\n'\n '\\n'\n 'Jake turned to her, his expression serious. \u201cMe too. I thought those days '\n 'were gone forever. But now, I can\u2019t imagine not having you around.\u201d\\n'\n '\\n'\n 'The vulnerability in his voice struck a chord within her, and Emma nodded, '\n 'her heart racing. \u201cLet\u2019s promise to keep doing this. No matter where life '\n 'takes us. I don\u2019t want to lose you again.\u201d\\n'\n '\\n'\n 'He reached for her hand, a simple gesture that spoke volumes. \u201cI promise, '\n 'Emma. We\u2019ll make this work.\u201d \\n'\n '\\n'\n 'In that moment, as the sun dipped below the horizon, they sealed their pact '\n 'with a shared glance that spoke of hope and renewed commitment. The years '\n 'apart had been filled with silence, but now, in the glow of friendship '\n 'reignited, they were ready to weave new stories together.\\n'\n '\\n'\n 'As they walked back through the park, the sounds of the evening wrapped '\n 'around them, a symphony of cicadas and rustling leaves. Emma felt lighter, '\n 'as if the weight of the past had been lifted, replaced by the promise of a '\n 'future filled with laughter, art, and companionship. \\n'\n '\\n'\n 'And for the first time in years, she felt truly free.\\n'\n '\\n')\n</code></pre>"}]}